val nat : Uni
let nat = forall (T: Uni), (T -> T) -> T -> T

val succ' : nat -> nat
let succ' = \n.\T.\s.\z. s (n T s z)

val zero : nat
let zero = \T.\s.\z. z

val succ : nat -> nat
let succ n = \T.\s.\z. s (n T s z)
